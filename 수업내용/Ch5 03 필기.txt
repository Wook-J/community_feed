JPA(Java Persistence API) 란?
- Java 진영에서 ORM 기술 표준으로 사용하는 인터페이스 모음

ORM(Object Relational Mapping) 란?
- Class 객체와 RDB 테이블을 자동으로 매핑해주고 영속화 함

왜 JPA를 써야 할까?

- RDB 테이블에 들어가있는 데이터와  Java 객체가 다름!!

- RDB 테이블 : 컬럼을 통해 양 방향 연결이 가능하고, 고정된 형태의 값을 갖고 있음
- Java 객체 : 객체 간 양 뱡향 연결이 불가능하고, 유연하게 다양한 데이터 구조를 사용가능함!

--------------------------------------------------------------------------------------------------------------------
ORM를 통해서 RDB와 객체의 간극을 줄이자!!!
1.  추상화
- 추상 계층을 제공해서 객체를 테이블 형태로 변환해주기 때문에 SQL문을 쓰지않고도 개발이 가능!

2. 생산성
- 반복되는 CRUD 코드가 줄어 생산성 증가!

3. 유지보수
- DB 시스템 변경에도 유연함
- 데이터 접근 중심의 로직으로 ERD 의존도를 낮추어 유지보수 용이
 
4. 보안
- SQL 인젝션, 쿼리 조작 등 보안 문제에서 자유로움
--------------------------------------------------------------------------------------------------------------------
하이버네이트 : 여러 JPA 구현체 중 하나

엔티티 매니저와 엔티티
- 엔티티 매니저 : 엔티티들을 관리하는 객체
- 엔티티 : DB에서 영속적으로 저장된 데이터를 자바 객체로 매핑애 인스턴스로 존재하는 데이터

영속성 컨텍스트 : 엔티티 매니저가 엔티티를 관리하기 위해 필요한 공간
- 엔티티를 영구 저장하고 삭제하고 관리하는 환경
- 주로 엔티티 매니저 1개당 영속성 컨텍스트 1개를 관리함

영속성 컨텍스트에서 무슨일이 일어나고 어떻게 관리할까?
- 엔티티 매니저가 엔티티를 관리하기 위해서는 영속성 컨텍스트 안에 있어야 함
- 엔티티는 여러 상태들을 거쳐 엔티티 매니저에게 관리가 되거나 아니면 아예 눈 밖에 나거나 하면서 저장/삭제됨
- 이런 일련의 과정을 "엔티티 라이프 사이클" 이라고 함!