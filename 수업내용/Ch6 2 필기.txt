리팩토링을 위한 인수테스트

인수테스트 : 사용자 관점에서 요구사항을 만족하는 지 검증(최종단계의 검증)
(Acceptance test: 즉 유저에게 전달이 되어 인수되기 전에 수행하는 테스트)

통합테스트 : 주로 외부 라이브러리와 단위테스트 검증으로 결합한 테스트
(인수 테스트는 이런 통합테스트보다 더 큰 범위로 사용자 관점이 포함됨)

(단위테스트 : 메서드 단위로 기능을 테스트)

우린 커뮤니티 피드 서비스의 최종 유저인 클라이언트 단인 API 단위로 인수테스트를 진행

만약 MVC 패턴으로 화면도 같이 구현해야 했다면 화면에 잘 노출이 되는 것까지도 테스트에 포함됨

인수테스트의 장점
- 단위테스트에서 검증할 수 없던 것들을 검증가능!
  (외부 및 스프링 프레임워크 연동을 통해 정말 애플리케이션이 비즈니스 목표를 달성하고 있는 지 전체적으로 확인 가능)
- 실제 유저들의 목표달성 테스트 -> 애플리케이션의 퀄리티 향상
- 문서화 효과(애플리케이션 전체 동작을 테스트로 표현) -> 유지 보수 때 테스트를 보고 소프트웨어의 요구사항을 알 수 있음
- 생산성 높아짐! (원래 매번 컨트롤러 만들고 나서는 포스트맨을 통해 요청하고 DB로 들어가서 확인..)
--> 결국 우리가 테스트를 하는 이유는 안정성과 유저가 필요로 하는 기능을 만들기 위함임!!

실제로 인수테스트를 적용하고 기능을 변경했을 때 어떤 장점이 있을까?


Rest-assured
- Java RestApi 확인을 위한 라이브러리(-> HTTP 요청을 테스트 코드로 만들어 둘 거임!)
  (그리고 단위 테스트 코드를 위해 최대한 가독성이 좋은 테스트 코드를 위해 템플릿 실습예정)
- 인수 테스트 템플릿 제작으로 테스트 코드 유지보수도 편하게!

---------------------------------------------------------------------------------------------
질문과 과제
1. 실제 사용자 관점에서 요구사항을 만들기 위함이면, fake, h2 같은 테스트 환경 vs 실제 API 연동이나 MySQL 연동?