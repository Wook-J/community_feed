h2 DB를 통해 인수테스트를 진행하는 경우 한계가 있음
- h2도 관계형DB긴 하지만 MySQL이랑 분명 다른점이 많음(문법, 쓰이는 함수, index 등)
-> 확실한 인수테스트를 작성하기 위해서는 도커 이미지 파일을 이용해서 빌드와 배포할 때
     MySQL이나 Redis 같은 외부 DB를 이미지화해서 같이 띄워서 환경을 고립시키는 방법도 있음!
- 지금은 도커를 통한 배포보다는 테스트와 아키텍처, 애플리케이션에서만 활용할 수 있는 최선의 테스트 작성 예정

build.gradle.kts 추가 이후 인수테스트 작성을 위한 템플릿을 작성해보자!
인수테스트를 위한 스프링 환경 세팅
test package 하위에 application-test.yml파일 생성

- 이 테스트 환경에서는 업데이트가 아닌 매번 테스트가 실행될 때마다 새로운 테이블을 만들기 위해
   기존 테이블을 제거해주고 생성해주는 create drop 옵션으로 ddl 옵션 변경
- 마찬가지로 open in view는 false

--> 이제 인수테스트를 위한 steps를 작성!

인수테스트에서는 기존과 다르게 DB를 이용해서 만들게 됨
이럴 때 가장 유의해야 할 점?(템플릿에서 어떤 작업을 진행해야 할까?)
- 테스트마다 독립성이 보장되어야 함
  (만약 유저를 생성하는데 기존에 id가 1번이었고 test 2개를 한번에 돌릴 때에 id가 달라지게 된다면
    테스트 작성 조건이 까다로워지거나 어느때는 성공하고 어느때는 실패하는 맞지않는 테스트가 될 수도..!)
-> 환경에 따라 또는 어떤 테스트를 같이 진행한다고 해서 다른 결과가 나오면 안됨!!!!

-> 이걸 위해 템플릿을 제작할 예정임!
- 템플릿 같은 경우 전에 DB test 환경을 싹 지워주는 클래스는 먼저 만들예정(2가지 작업 필요)
- 1. 엔티티에 있는 테이블의 이름을 가지고 와야 하고
- 2. 그것들을 맞춰서 전부 삭제하는 쿼리문을 발송하기

DatabaseCleanUp.java
- EntityManager : 쿼리문을 직접쓰거나 persist를 이용할 때 불러왔었음

엔티티의 생명주기(Lifecycle)를 관리하고, 데이터베이스와의 CRUD 작업을 수행하는 인터페이스
쉽게 말해, EntityManager는 JPA에서 SQL을 대신 처리해주는 도구이며, 다음과 같은 역할을 함
- 객체 저장 (persist)
- 객체 조회 (find, createQuery)
- 객체 수정 (자동 Dirty Checking)
- 객체 삭제 (remove)

InitializingBean 내 afterPropertiesSet
- Bean Factory에 의해 모든 Properties들이 모든 Bean들이 설정되고 난 뒤에 실행이 되는 메서드
- 엔티티들이 정상적으로 등록이 된 후에 수행이 이루어짐


자동생성되는 id 같은 경우에는 auto increment(ex UserEntity의 @GeneratedValue(strategy = GenerationType.IDENTITY))
UserReltationEntity : id 값을 지정해주고 만들어짐
- auto increment 값들도 전부 1로 초기화 해줘야지 항상 같은 환경에서 테스트를 진행할 수 있음
-> 그래서 따로 1로 설정이 안되도록, 그런 쿼리문이 나가지 않도록, 테이블을 따로 만들것임(notGeneratedTableNames)

-----------------------------------------------------------------------------------------------------------
@SpringBootTest(webEnvironment =  WebEnvironment.DEFINED_PORT) : 고정으로 8080포트 사용

지금까지 만든 DataLoader과 DatabaseCleanUp를 주입시키고,
테스트가 실행이 될때마다 테이블을 비워주고 불러오는 형식으로 추가!
(AcceptanceTestTemplate 작성!)
