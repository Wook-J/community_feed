지금까지 엔티티까지 만들었음!
-> 본격적으로 데이터를 저장하고 조회하는 로직들을 위한 레포지토리 생성

3가지 방식!
1. spring data jpa의 쿼리 메서드 기능 활용한 작성!

org.fastcampus.user.repository.UserRepositoryImpl 생성
org.fastcampus.user.repository.jpa.JpaUserRepository 생성

@Repository	DAO/Repository 클래스임을 명시, 예외 변환 처리, 빈 등록
@RequiredArgsConstructor	final 필드들을 매개변수로 하는 생성자 자동 생성 (롬복)

UserRepositoryImpl 내에 save, findById 생성
- Fake객체를 이용해서 기능 구현을 해뒀던가 동일한 기능을 하는 레포지토리 기능 완성
-> 유저에 대한 생성과 조회 기능을 쿼리하나 짜지 않고 기능 구현했음!

2. spring data jpa에서 제공하는 jpql를 사용해서 팔로잉/팔로우 하는 유저의 이름, 프로필리스트 반환하는 쿼리문 작성
- 쿼리문이 직접 사용될 것이므로 repository.jpa 하위에다가 직접 생성
org.fastcampus.user.repository.jpa.JpaUserListQueryRepository 생성
- sqpa사용 하려면 @Query 필요

3. QuertDsl 라이브러리 이용 - build를 수정해야함!
- 프로젝트가 컴파일 될 때 @Entity 검색해서 새로운 Q Entity를 만들어줌
- 자동 생성된 Q Entity들은 QuertDsl 라이브러리에서 손쉽게 쿼리를 작성할 수 있도록 도와줌

Gradle Tool(오른쪽 네비바 코끼리 아이콘)
Tasks - build - clean 클릭
Tasks - other - compile.java 클릭
-> build/generated/querydsl 하위에 Q 객체가 생성된 것을 볼 수 있음!

queryDsl 사용을 위해 fastcampus.common 하위에 config.java 추가