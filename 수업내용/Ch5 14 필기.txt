DB 작업이 계속 처리되지 않고 일정 시간 지속되면, 결국 스레드 풀이 부족해지고 에러가 발생함..!

Row Lock 쿼리를 이용해서 Lost Update문제 해결

테스트할 때는 문제없는데 실제 프로덕션할 때엔??

유저별로 큐를 가지고 오는 지금 상황에서 큐에 만개가 쌓여있다면??
또 월별 액티브 유저가 100만 일 때는...??
-> 조회에서의 성능을 가장 드라마틱하게 올려주는 건 캐싱과 인덱스!!

여기선 인덱스를 통해 조회성능을 끌어올릴것임!
(+ 장애에 대한 방지도 됨!)
- 주니어 개발자가 많이하는 실수 : 현업에서 데이터 누적으로 인한 문제!

인덱스는 어떻게 생성히고 동작할까?? (by MySQL의 B-Tree구조)
- 데이터의 인덱스는 B+ Tree형태로 저장(+ 트리구조)
- 인덱스의 리프노드에는 항상 레코드 값을 찾을 주소값을 갖고 있음!
- 각 B+ tree 각 리프노드에는 데이터들이 저장되는 것이 아닌 데이터들의 PK가 저장되어 있음

실제로 클러스터드 키(PK)에 따로 접근해서 직접 PK를 통해 데이터에 접근
단, 항상 이런 인덱스를 통해 조회하는 것이 빠르지만은 않음...!
(인덱스를 거치고 데이터에 접근하는 것이기 때문에 전체테이블의 데이터가 만약 20퍼가 넘는 데이터가 인덱스 대상에 속해 있으면
오히러 1단계를 더 거치기 때문에 더 느리게 반환됨)
또 중요한 것은 인덱스의 칼럼순서!!

인덱서를 생성할 때에는 조건문이 조회하는 순서에 맞게 생성을 해줘야 함!!!!!
-> 한번 실제 요청을 해서 인덱스를 생성하는 것을 거치고 그리고 실행계획을 확인해보자!

-----------------------------------------------------------------------------------------------
피드를 요청한 경우!
Hibernate: 
    select
        pe1_0.id,
        pe1_0.content,
        ue1_0.id,
        ue1_0.name,
        ue1_0.profile_image,
        pe1_0.reg_dt,
        pe1_0.mod_dt,
        pe1_0.comment_count,
        pe1_0.like_count,
        (le1_0.target_id is not null 
        and le1_0.target_type is not null 
        and le1_0.user_id is not null) 
    from
        community_user_post_queue upqe1_0 
    join
        community_post pe1_0 
            on upqe1_0.post_id=pe1_0.id 
    join
        community_user ue1_0 
            on upqe1_0.author_id=ue1_0.id 
    left join
        community_like le1_0 
            on pe1_0.id=le1_0.target_id 
            and le1_0.target_type=? 
            and le1_0.user_id=? 
    where
        upqe1_0.user_id=? 
    order by
        upqe1_0.post_id desc 
    limit
        ?


-> 실행계획 보는 방법
(실행계획 : MySQL 서버에서 요청한 SQL문을 어떻게 데이터를 불러올지에 대한 계획, 경로)
-> 쿼리문 앞쪽에 explain 추가(ex explain select ...)


type, possilbe_keys, ref, Extra 같은 것들 추가됨
type 에 ALL 이 나타남 -> 테이블 전체를 검색했다는 것임!(추후 데이터가 많아지면 문제발생할 가능성이 높음!)

인덱스추가! 디비버에서 community_user_post_queue table 내 index 추가(순서대로)
 user_id, post_id
type 에 ALL 대신 ref가 나옴
type에 const도 있음
type 종류
- const : unique key로 한 건을 조회할 때 발생!
- ref : 인덱스의 종류와 상관없이 동등 조건으로 검색이 될때 사용되는 타입
- range : 인덱스 레인지 스캔(검색할 인덱스의 범위가 결정되었을 때 사용하는 방식) 접근의 한 방법
  (리프 노드 사이에 있는 링크를 이용해 시작할 노드를 찾고, 아래로 쭉 내려가서 그 범위만 스캔 
    -> 멈출범위에 다다르면 읽은 레코드 반환)
- index : 레인지 풀 스캔 진행
- ALL : 

더 중요한 포인트 : 가지고 오는 개수에 항상 제한을 걸어두는 것!!!!!
- 어떤 리스트를 조회해도 결국에는 이게 너무 많다면 장애로 이어질 수 있음
- Java 애플리케이션에서는 항상 제한된 메모리를 가지고 있으므로, 너무 많이 가져오면 메모리가 부족해질 수 있음!!!

하지만 인덱스도 무지막지하게 많은 숫자앞에서는 크게 효과를 누릴 수 없긴함..!

다음 수업시간엔 이것을 견딜 수 있는 설계를 다시 진행해서 애플리케이션을 어떻게 개선시킬 수 있을 지 연습할 예정!