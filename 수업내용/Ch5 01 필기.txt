스프링을 쓰는 가장 큰 이유!
- 좋은 객체 지향, 클린 아키텍처를 유지할 수 있게 해주는 프레임워크!!
- 싱글톤 디자인 패턴을 통해 유지 가능!


싱글톤 디자인패턴
- 인스턴스를 1개만 생성되는 것을 보장하는 디자인 패턴!
  ex) 우리가 만들었던 FakeObjectFactory!

- 이미 만들어졌던 객체를 효율적으로 계속해서 활용
  -> 웹 요청과 같이 여러 요청이 올 때 효율적으로 대응 가능


스프링 컨테이너 : 싱글톤 원리가 적용된 스프링에서 제공하는 객체 저장소
- 객체들을 미리 내부적으로 만들어 두고 필요할때마다 반환해주는 식으로 객체들을 관리하고 사용할 수 있게 반환해줌

- Bean 객체 : 스프링 컨테이너에 저장되는 스프링에서 관리되는 객체
  - @Bean : 메서드 위에 사용. @Bean이 붙은 메서드명 명이 Bean 객체의 이름이 됨
  - @Component : 주로 클래스 위에 사용. 클래스명이 Bean 객체의 이름이 됨

- 스프링은 컴포넌트 스캔으로 Bean 객체가 될 것들을 찾는다.

- 스프링 컨테이너가 알맞은 빈 객체를 의존성에 맞게 주입해준다.

----> 이걸 DI(Dependency Injection)라고 함!!


스프링이 없었다면....하나하나 작성해서 넣어야 했지만,
(직접 레파지토리에 의존하는 코드 -> 클린 아키텍처 위배)
(메인 한 곳에서 주입으로 넣는 형태 -> 서비스가 많아지면 유지보수가 어려움)

스프링은 스프링 컨테이너에서 알아서 다 해준다!
- 직접 구현체를 의존하지 않아도 되고
- 메인이나 어디 한 곳에서 잔똑 코드를 직접 작성하지 않아도 된다.
- DB가 바뀐다고 해도 메인 메서드나 서비스가 변경이 일어나지 않는다!

--> 객체지향과 클린 아키텍처의 핵심인 다형성을 스프링 프레임워크로 완전히 구현해 낼 수 있음!

제어를 스프링에게 넘겼기 때문에 IoC(Inversion of Control)이라고 함!

---------------------------------------------------------------------------------------------------------------------------------------------

스프링 부트를 쓸 것임
- 스프링 프레임워크에서 필요했던 각종 설정들을 간편하게 사용가능
- 톰캣이라는 웹서버를 다운받거나 연결하지 않아도 스프링부트를 이용하면 편리하게 연결 및 실행 가능
- 실습은 자바 17 버전과 스프링 부트 11버전을 사용할 예정

---------------------------------------------------------------------------------------------------------------------------------------------
질문과 과제
1. 싱글톤 패턴 외에 스프링에 적용된 디자인 패턴??
2. 스프링에서 웹 외부 요청이 왔을 때 어떤 프로세스를 통해 응답을 반환하는지??